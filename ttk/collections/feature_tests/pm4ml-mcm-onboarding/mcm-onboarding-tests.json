{
  "name": "multi",
  "test_cases": [
    {
      "id": 1,
      "name": "Happy Path for PM4ML MCM Onboarding",
      "fileInfo": {
        "path": "pm4ml-mcm-onboarding/mcm-onboarding-tests.json"
      },
      "requests": [
        {
          "id": 1,
          "description": "Send request to management api",
          "apiVersion": {
            "minorVersion": 8,
            "majorVersion": 1,
            "type": "openapi_core_conn",
            "asynchronous": false,
            "additionalApi": true
          },
          "operationPath": "/state",
          "path": "/state",
          "method": "get",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "endpointConfig callbackURL is not null",
                "exec": [
                  "expect(response.body.endpointConfig.callbackURL).to.not.be.null"
                ]
              },
              {
                "id": 3,
                "description": "endpointConfig ips has a length of 3",
                "exec": [
                  "expect(response.body.endpointConfig.ips).to.have.lengthOf(3)"
                ]
              },
              {
                "id": 4,
                "description": "dfspClientCert csr starts with -----BEGIN CERTIFICATE REQUEST-----",
                "exec": [
                  "expect(response.body.dfspClientCert.csr.startsWith('-----BEGIN CERTIFICATE REQUEST-----')).to.be.true"
                ]
              },
              {
                "id": 5,
                "description": "dfspClientCert privateKey starts with -----BEGIN RSA PRIVATE KEY-----",
                "exec": [
                  "expect(response.body.dfspClientCert.privateKey.startsWith('-----BEGIN RSA PRIVATE KEY-----')).to.be.true"
                ]
              },
              {
                "id": 6,
                "description": "dfspClientCert cert starts with -----BEGIN CERTIFICATE-----",
                "exec": [
                  "expect(response.body.dfspClientCert.cert.startsWith('-----BEGIN CERTIFICATE-----')).to.be.true"
                ]
              },
              {
                "id": 7,
                "description": "dfspClientCert cert starts with -----BEGIN CERTIFICATE-----",
                "exec": [
                  "expect(response.body.dfspClientCert.cert.startsWith('-----BEGIN CERTIFICATE-----')).to.be.true"
                ]
              },
              {
                "id": 8,
                "description": "dfspJWS publicKey starts with -----BEGIN PUBLIC KEY-----",
                "exec": [
                  "expect(response.body.dfspJWS.publicKey.startsWith('-----BEGIN PUBLIC KEY-----')).to.be.true"
                ]
              },
              {
                "id": 9,
                "description": "dfspJWS privateKey starts with -----BEGIN RSA PRIVATE KEY-----",
                "exec": [
                  "expect(response.body.dfspJWS.privateKey.startsWith('-----BEGIN RSA PRIVATE KEY-----')).to.be.true"
                ]
              },
              {
                "id": 10,
                "description": "connectorConfig jwsSigningKey starts with -----BEGIN RSA PRIVATE KEY-----",
                "exec": [
                  "expect(response.body.connectorConfig.jwsSigningKey.startsWith('-----BEGIN RSA PRIVATE KEY-----')).to.be.true"
                ]
              },
              {
                "id": 11,
                "description": "connectorConfig outbound tls creds ca starts with -----BEGIN CERTIFICATE-----",
                "exec": [
                  "expect(response.body.connectorConfig.outbound.tls.creds.ca.startsWith('-----BEGIN CERTIFICATE-----')).to.be.true"
                ]
              },
              {
                "id": 12,
                "description": "connectorConfig outbound tls creds cert starts with -----BEGIN CERTIFICATE-----",
                "exec": [
                  "expect(response.body.connectorConfig.outbound.tls.creds.cert.startsWith('-----BEGIN CERTIFICATE-----')).to.be.true"
                ]
              },
              {
                "id": 13,
                "description": "connectorConfig outbound tls creds key starts with -----BEGIN RSA PRIVATE KEY-----",
                "exec": [
                  "expect(response.body.connectorConfig.outbound.tls.creds.key.startsWith('-----BEGIN RSA PRIVATE KEY-----')).to.be.true"
                ]
              },
              {
                "id": 14,
                "description": "dfspCA cert starts with -----BEGIN CERTIFICATE-----",
                "exec": [
                  "expect(response.body.dfspCA.cert.startsWith('-----BEGIN CERTIFICATE-----')).to.be.true"
                ]
              },
              {
                "id": 15,
                "description": "hubCa rootCertificate starts with -----BEGIN CERTIFICATE-----",
                "exec": [
                  "expect(response.body.hubCa.rootCertificate.startsWith('-----BEGIN CERTIFICATE-----')).to.be.true"
                ]
              },
              {
                "id": 16,
                "description": "hubCa validationState is VALID",
                "exec": [
                  "expect(response.body.hubCa.validationState).to.equal('VALID')"
                ]
              },
              {
                "id": 17,
                "description": "hubCa type is INTERNAL",
                "exec": [
                  "expect(response.body.hubCa.type).to.equal('INTERNAL')"
                ]
              },
              {
                "id": 18,
                "description": "progressMonitor values are set to true",
                "exec": [
                  "expect(response.body.progressMonitor.HUB_CA).to.equal(true)",
                  "expect(response.body.progressMonitor.PEER_JWS).to.equal(true)",
                  "expect(response.body.progressMonitor.ENDPOINT_CONFIG).to.equal(true)",
                  "expect(response.body.progressMonitor.DFSP_JWS).to.equal(true)",
                  "expect(response.body.progressMonitor.DFSP_CA).to.equal(true)",
                  "expect(response.body.progressMonitor.DFSP_SERVER_CERT).to.equal(true)",
                  "expect(response.body.progressMonitor.DFSP_CLIENT_CERT).to.equal(true)",
                  "expect(response.body.progressMonitor.HUB_CERT).to.equal(true)"
                ]
              },
              {
                "id": 19,
                "description": "check peerJWS",
                "exec": [
                  "expect(environment.peerJWSDfspIds.sort()).to.include.members(eval(environment.PARTICIPANTS_TO_TEST).sort());"
                ]
              }
            ]
          },
          "url": "{$inputs.DFSP1_MGMT_API_URL}",
          "scriptingEngine": "postman",
          "scripts": {
            "preRequest": {
              "exec": [
                "const getParticipantsRequest = {",
                "  url: pm.environment.get(\"CENTRAL_LEDGER_SERVICE\")+'/participants',",
                "  method: 'GET',",
                "};",
                "pm.sendRequest(getParticipantsRequest, function (err, response) {",
                "    //console.log(response.json())",
                "    var jsonData = response.json();",
                "    var participantsInHub = [];",
                "    var blockedParticipants = pm.environment.get(\"BLOCKED_PARTICIPANTS\");",
                "    participantsInHub = jsonData",
                "                    .filter(participant => !blockedParticipants.includes(participant.name) )",
                "                    .map(participant => participant.name);",
                "    console.log(participantsInHub);",
                "    pm.environment.set('mcmParticipants', participantsInHub);",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "//console.log(pm.response.body)",
                "//console.log(response.body)",
                "",
                "var peerJWSDfspIds = pm.response.body.peerJWS.map(dfsp => dfsp.dfspId);",
                "",
                "console.log('peerJWSDfspIds:',peerJWSDfspIds);",
                "pm.environment.set('peerJWSDfspIds', peerJWSDfspIds);"
              ]
            }
          }
        }
      ]
    }
  ]
}